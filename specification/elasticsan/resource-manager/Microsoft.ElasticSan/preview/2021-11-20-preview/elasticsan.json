{
  "swagger": "2.0",
  "info": {
    "version": "2021-11-20-preview",
    "title": "ElasticSanManagement"
  },
  "host": "management.azure.com",
  "schemes": [
    "https"
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "security": [
    {
      "azure_auth": [
        "user_impersonation"
      ]
    }
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "Azure Active Directory OAuth2 Flow",
      "scopes": {
        "user_impersonation": "impersonate your user account"
      }
    }
  },
  "tags": [
    {
      "name": "ElasticSans",
      "description": "APIs for ElasticSan operations."
    },
    {
      "name": "ElasticSanOperations",
      "description": "APIs for ElasticSan operations,"
    },
    {
      "name": "VolumeGroups",
      "description": "APIs for Volume Group operations."
    },
    {
      "name": "Volumes",
      "description": "APIs for Volume operations."
    },
    {
      "name": "Snapshots",
      "description": "APIs for Snapshot operations."
    }
  ],
  "paths": {
    "/providers/Microsoft.ElasticSan/operations": {
      "get": {
        "tags": [
          "Elastic San Operations"
        ],
        "operationId": "Operations_List",
        "description": "Gets a list of ElasticSan operations.",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Retrieved RP operations",
            "schema": {
              "$ref": "#/definitions/ElasticSanOperationListResult"
            }
          },
          "default": {
            "description": "Error from the RP",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        },
        "x-ms-examples": {
          "Operations_List_MaximumSet_Gen": {
            "$ref": "./examples/Operations_List_MaximumSet_Gen.json"
          },
          "Operations_List_MinimumSet_Gen": {
            "$ref": "./examples/Operations_List_MinimumSet_Gen.json"
          }
        }
      }
    },
    "/providers/Microsoft.ElasticSan/skus": {
      "get": {
        "tags": [
          "Elastic San Skus"
        ],
        "summary": "List all the available Skus in the region and information related to them",
        "operationId": "Skus_List",
        "parameters": [
          {
            "$ref": "#/parameters/ApiVersionParameter"
          },
          {
            "name": "$filter",
            "in": "query",
            "description": "Specify $filter='location eq <location>' to filter on location.",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "Lists the available Skus and information related to them.",
            "schema": {
              "$ref": "#/definitions/SkuInformationList"
            }
          },
          "default": {
            "description": "Error from the RP.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": null
        },
        "x-ms-examples": {
          "Skus_List_MaximumSet_Gen": {
            "$ref": "./examples/Skus_List_MaximumSet_Gen.json"
          },
          "Skus_List_MinimumSet_Gen": {
            "$ref": "./examples/Skus_List_MinimumSet_Gen.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/providers/Microsoft.ElasticSan/elasticSans": {
      "get": {
        "tags": [
          "ElasticSans"
        ],
        "operationId": "ElasticSans_ListBySubscription",
        "description": "Gets a list of ElasticSans in a subscription",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation completed successfully; retrieved Elastic San by subscription",
            "schema": {
              "$ref": "#/definitions/ElasticSanList"
            }
          },
          "default": {
            "description": "Error from the RP",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "ElasticSans_ListBySubscription_MaximumSet_Gen": {
            "$ref": "./examples/ElasticSans_ListBySubscription_MaximumSet_Gen.json"
          },
          "ElasticSans_ListBySubscription_MinimumSet_Gen": {
            "$ref": "./examples/ElasticSans_ListBySubscription_MinimumSet_Gen.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ElasticSan/elasticSans": {
      "get": {
        "tags": [
          "ElasticSan"
        ],
        "operationId": "ElasticSans_ListByResourceGroup",
        "description": "Gets a list of ElasticSan in a resource group.",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation completed successfully; retrieved elasticSans by resource group",
            "schema": {
              "$ref": "#/definitions/ElasticSanList"
            }
          },
          "default": {
            "description": "Error from the RP",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "ElasticSans_ListByResourceGroup_MaximumSet_Gen": {
            "$ref": "./examples/ElasticSans_ListByResourceGroup_MaximumSet_Gen.json"
          },
          "ElasticSans_ListByResourceGroup_MinimumSet_Gen": {
            "$ref": "./examples/ElasticSans_ListByResourceGroup_MinimumSet_Gen.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ElasticSan/elasticSans/{elasticSanName}": {
      "put": {
        "tags": [
          "ElasticSans"
        ],
        "operationId": "ElasticSans_CreateOrUpdate",
        "description": "Create or Update ElasticSan.",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ElasticSanNameParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ElasticSan"
            },
            "description": "Elastic San object."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK -- Returned when the create or update operation is successfully completed.",
            "schema": {
              "$ref": "#/definitions/ElasticSan"
            }
          },
          "201": {
            "description": "Accepted -- Create or update request accepted; operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/ElasticSan"
            }
          },
          "default": {
            "description": "Error from the RP",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-examples": {
          "ElasticSans_CreateOrUpdate_MaximumSet_Gen": {
            "$ref": "./examples/ElasticSans_CreateOrUpdate_MaximumSet_Gen.json"
          },
          "ElasticSans_CreateOrUpdate_MinimumSet_Gen": {
            "$ref": "./examples/ElasticSans_CreateOrUpdate_MinimumSet_Gen.json"
          }
        }
      },
      "patch": {
        "tags": [
          "ElasticSans"
        ],
        "operationId": "ElasticSans_Update",
        "description": "Update a Elastic San.",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ElasticSanNameParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/ElasticSan"
            },
            "description": "Elastic San object."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK -- Returned when the update operation is successfully completed.",
            "schema": {
              "$ref": "#/definitions/ElasticSan"
            }
          },
          "202": {
            "description": "Accepted -- Update request accepted; operation will complete asynchronously."
          },
          "default": {
            "description": "Error from the RP.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-examples": {
          "ElasticSans_Update_MaximumSet_Gen": {
            "$ref": "./examples/ElasticSans_Update_MaximumSet_Gen.json"
          },
          "ElasticSans_Update_MinimumSet_Gen": {
            "$ref": "./examples/ElasticSans_Update_MinimumSet_Gen.json"
          }
        }
      },
      "delete": {
        "tags": [
          "ElasticSans"
        ],
        "operationId": "ElasticSans_Delete",
        "description": "Delete a Elastic San.",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ElasticSanNameParameter"
          },
          {
            "$ref": "#/parameters/ForceDeleteVolumeGroupsParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete operation completed successfully."
          },
          "202": {
            "description": "Delete request accepted; operation will complete asynchronously."
          },
          "204": {
            "description": "Resource does not exist in the subscription."
          },
          "default": {
            "description": "Error from the RP",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-examples": {
          "ElasticSans_Delete_MaximumSet_Gen": {
            "$ref": "./examples/ElasticSans_Delete_MaximumSet_Gen.json"
          },
          "ElasticSans_Delete_MinimumSet_Gen": {
            "$ref": "./examples/ElasticSans_Delete_MinimumSet_Gen.json"
          }
        }
      },
      "get": {
        "tags": [
          "ElasticSans"
        ],
        "operationId": "ElasticSans_Get",
        "description": "Get a ElasticSan.",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ElasticSanNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation completed successfully; retrieved ElasticSan.",
            "schema": {
              "$ref": "#/definitions/ElasticSan"
            }
          },
          "default": {
            "description": "Error from the RP.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-ms-examples": {
          "ElasticSans_Get_MaximumSet_Gen": {
            "$ref": "./examples/ElasticSans_Get_MaximumSet_Gen.json"
          },
          "ElasticSans_Get_MinimumSet_Gen": {
            "$ref": "./examples/ElasticSans_Get_MinimumSet_Gen.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ElasticSan/elasticSans/{elasticSanName}/volumeGroups": {
      "get": {
        "tags": [
          "VolumeGroups"
        ],
        "description": "List VolumeGroups.",
        "operationId": "VolumeGroups_ListByElasticSan",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ElasticSanNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation completed successfully; retrieved Volume Group List.",
            "schema": {
              "$ref": "#/definitions/VolumeGroupList"
            }
          },
          "default": {
            "description": "Error from the RP.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "VolumeGroups_ListByElasticSan_MaximumSet_Gen": {
            "$ref": "./examples/VolumeGroups_ListByElasticSan_MaximumSet_Gen.json"
          },
          "VolumeGroups_ListByElasticSan_MinimumSet_Gen": {
            "$ref": "./examples/VolumeGroups_ListByElasticSan_MinimumSet_Gen.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ElasticSan/elasticSans/{elasticSanName}/volumegroups/{volumeGroupName}": {
      "put": {
        "tags": [
          "VolumeGroups"
        ],
        "description": "Create or Update a Volume Group.",
        "operationId": "VolumeGroups_CreateOrUpdate",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ElasticSanNameParameter"
          },
          {
            "$ref": "#/parameters/VolumeGroupNameParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VolumeGroup"
            },
            "description": "Volume Group object."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK -- Returned when the create or update operation is successfully completed.",
            "schema": {
              "$ref": "#/definitions/VolumeGroup"
            }
          },
          "201": {
            "description": "Accepted -- Create or update request accepted; operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/VolumeGroup"
            }
          },
          "default": {
            "description": "Error from the RP.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-examples": {
          "VolumeGroups_CreateOrUpdate_MaximumSet_Gen": {
            "$ref": "./examples/VolumeGroups_CreateOrUpdate_MaximumSet_Gen.json"
          },
          "VolumeGroups_CreateOrUpdate_MinimumSet_Gen": {
            "$ref": "./examples/VolumeGroups_CreateOrUpdate_MinimumSet_Gen.json"
          }
        }
      },
      "patch": {
        "tags": [
          "VolumeGroups"
        ],
        "description": "Update an VolumeGroup.",
        "operationId": "VolumeGroups_Update",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ElasticSanNameParameter"
          },
          {
            "$ref": "#/parameters/VolumeGroupNameParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VolumeGroup"
            },
            "description": "Volume Group object."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK -- Returned when the update operation is successfully completed.",
            "schema": {
              "$ref": "#/definitions/VolumeGroup"
            }
          },
          "202": {
            "description": "Accepted -- Update request accepted; operation will complete asynchronously."
          },
          "default": {
            "description": "Error from the RP.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-examples": {
          "VolumeGroups_Update_MaximumSet_Gen": {
            "$ref": "./examples/VolumeGroups_Update_MaximumSet_Gen.json"
          },
          "VolumeGroups_Update_MinimumSet_Gen": {
            "$ref": "./examples/VolumeGroups_Update_MinimumSet_Gen.json"
          }
        }
      },
      "delete": {
        "tags": [
          "VolumeGroups"
        ],
        "description": "Delete an VolumeGroup.",
        "operationId": "VolumeGroups_Delete",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ElasticSanNameParameter"
          },
          {
            "$ref": "#/parameters/VolumeGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ForceDeleteVolumesSnapshotsParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete operation completed successfully."
          },
          "202": {
            "description": "Delete request accepted; operation will complete asynchronously."
          },
          "204": {
            "description": "Resource does not exist in the subscription."
          },
          "default": {
            "description": "Error from the RP",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-examples": {
          "VolumeGroups_Delete_MaximumSet_Gen": {
            "$ref": "./examples/VolumeGroups_Delete_MaximumSet_Gen.json"
          },
          "VolumeGroups_Delete_MinimumSet_Gen": {
            "$ref": "./examples/VolumeGroups_Delete_MinimumSet_Gen.json"
          }
        }
      },
      "get": {
        "tags": [
          "VolumeGroups"
        ],
        "description": "Get an VolumeGroups.",
        "operationId": "VolumeGroups_Get",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ElasticSanNameParameter"
          },
          {
            "$ref": "#/parameters/VolumeGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation completed successfully; retrieved iSCSI Target.",
            "schema": {
              "$ref": "#/definitions/VolumeGroup"
            }
          },
          "default": {
            "description": "Error from the RP.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-ms-examples": {
          "VolumeGroups_Get_MaximumSet_Gen": {
            "$ref": "./examples/VolumeGroups_Get_MaximumSet_Gen.json"
          },
          "VolumeGroups_Get_MinimumSet_Gen": {
            "$ref": "./examples/VolumeGroups_Get_MinimumSet_Gen.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ElasticSan/elasticSans/{elasticSanName}/volumegroups/{volumeGroupName}/volumes/{volumeName}": {
      "put": {
        "tags": [
          "Volumes"
        ],
        "description": "Create or Update a Volume.",
        "operationId": "Volumes_CreateOrUpdate",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ElasticSanNameParameter"
          },
          {
            "$ref": "#/parameters/VolumeGroupNameParameter"
          },
          {
            "$ref": "#/parameters/VolumeNameParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Volume"
            },
            "description": "Volume object."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK -- Returned when the create or update operation is successfully completed.",
            "schema": {
              "$ref": "#/definitions/Volume"
            }
          },
          "201": {
            "description": "Accepted -- Create or update request accepted; operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/Volume"
            }
          },
          "default": {
            "description": "Error from the RP.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-examples": {
          "Volumes_CreateOrUpdate_MaximumSet_Gen": {
            "$ref": "./examples/Volumes_CreateOrUpdate_MaximumSet_Gen.json"
          },
          "Volumes_CreateOrUpdate_MinimumSet_Gen": {
            "$ref": "./examples/Volumes_CreateOrUpdate_MinimumSet_Gen.json"
          }
        }
      },
      "patch": {
        "tags": [
          "Volumes"
        ],
        "description": "Update an Volume.",
        "operationId": "Volumes_Update",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ElasticSanNameParameter"
          },
          {
            "$ref": "#/parameters/VolumeGroupNameParameter"
          },
          {
            "$ref": "#/parameters/VolumeNameParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Volume"
            },
            "description": "Volume object."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK -- Returned when the update operation is successfully completed.",
            "schema": {
              "$ref": "#/definitions/Volume"
            }
          },
          "202": {
            "description": "Accepted -- Update request accepted; operation will complete asynchronously."
          },
          "default": {
            "description": "Error from the RP.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-examples": {
          "Volumes_Update_MaximumSet_Gen": {
            "$ref": "./examples/Volumes_Update_MaximumSet_Gen.json"
          },
          "Volumes_Update_MinimumSet_Gen": {
            "$ref": "./examples/Volumes_Update_MinimumSet_Gen.json"
          }
        }
      },
      "delete": {
        "tags": [
          "Volumes"
        ],
        "description": "Delete an Volume.",
        "operationId": "Volumes_Delete",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ElasticSanNameParameter"
          },
          {
            "$ref": "#/parameters/VolumeGroupNameParameter"
          },
          {
            "$ref": "#/parameters/VolumeNameParameter"
          },
          {
            "$ref": "#/parameters/ForceDeleteSnapshotsParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete operation completed successfully."
          },
          "202": {
            "description": "Delete request accepted; operation will complete asynchronously."
          },
          "204": {
            "description": "Resource does not exist in the subscription."
          },
          "default": {
            "description": "Error from the RP",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-examples": {
          "Volumes_Delete_MaximumSet_Gen": {
            "$ref": "./examples/Volumes_Delete_MaximumSet_Gen.json"
          },
          "Volumes_Delete_MinimumSet_Gen": {
            "$ref": "./examples/Volumes_Delete_MinimumSet_Gen.json"
          }
        }
      },
      "get": {
        "tags": [
          "Volumes"
        ],
        "description": "Get an Volume.",
        "operationId": "Volumes_Get",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ElasticSanNameParameter"
          },
          {
            "$ref": "#/parameters/VolumeGroupNameParameter"
          },
          {
            "$ref": "#/parameters/VolumeNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation completed successfully; retrieved Volume.",
            "schema": {
              "$ref": "#/definitions/Volume"
            }
          },
          "default": {
            "description": "Error from the RP.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-ms-examples": {
          "Volumes_Get_MaximumSet_Gen": {
            "$ref": "./examples/Volumes_Get_MaximumSet_Gen.json"
          },
          "Volumes_Get_MinimumSet_Gen": {
            "$ref": "./examples/Volumes_Get_MinimumSet_Gen.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ElasticSan/elasticSans/{elasticSanName}/volumegroups/{volumeGroupName}/volumes": {
      "get": {
        "tags": [
          "Volumes"
        ],
        "description": "List Volumes in a VolumeGroup.",
        "operationId": "Volumes_ListByVolumeGroup",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ElasticSanNameParameter"
          },
          {
            "$ref": "#/parameters/VolumeGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation completed successfully; retrieved volumes in a volume group.",
            "schema": {
              "$ref": "#/definitions/VolumeList"
            }
          },
          "default": {
            "description": "Error from the RP",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Volumes_ListByVolumeGroup_MaximumSet_Gen": {
            "$ref": "./examples/Volumes_ListByVolumeGroup_MaximumSet_Gen.json"
          },
          "Volumes_ListByVolumeGroup_MinimumSet_Gen": {
            "$ref": "./examples/Volumes_ListByVolumeGroup_MinimumSet_Gen.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ElasticSan/elasticSans/{elasticSanName}/volumegroups/{volumeGroupName}/snapshots": {
      "get": {
        "tags": [
          "Snapshots"
        ],
        "description": "List Snapshots in a VolumeGroup.",
        "operationId": "Snapshots_ListByVolumeGroup",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ElasticSanNameParameter"
          },
          {
            "$ref": "#/parameters/VolumeGroupNameParameter"
          },
          {
            "$ref": "#/parameters/FilterByVolumeParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Operation completed successfully; retrieved volumes in a volume group.",
            "schema": {
              "$ref": "#/definitions/SnapshotList"
            }
          },
          "default": {
            "description": "Error from the RP",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-ms-pageable": {
          "nextLinkName": "nextLink"
        },
        "x-ms-examples": {
          "Snapshots_ListByVolumeGroup_MaximumSet_Gen": {
            "$ref": "./examples/Snapshots_ListByVolumeGroup_MaximumSet_Gen.json"
          },
          "Snapshots_ListByVolumeGroup_MinimumSet_Gen": {
            "$ref": "./examples/Snapshots_ListByVolumeGroup_MinimumSet_Gen.json"
          }
        }
      }
    },
    "/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.ElasticSan/elasticSans/{elasticSanName}/volumegroups/{volumeGroupName}/snapshots/{snapshotName}": {
      "put": {
        "tags": [
          "Snapshots"
        ],
        "description": "Create a Volume Snapshot.",
        "operationId": "Snapshots_CreateOrUpdate",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ElasticSanNameParameter"
          },
          {
            "$ref": "#/parameters/VolumeGroupNameParameter"
          },
          {
            "$ref": "#/parameters/SnapshotNameParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Snapshot"
            },
            "description": "Snapshot object."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK -- Returned when the create or update operation is successfully completed.",
            "schema": {
              "$ref": "#/definitions/Snapshot"
            }
          },
          "201": {
            "description": "Accepted -- Create or update request accepted; operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/Snapshot"
            }
          },
          "default": {
            "description": "Error from the RP.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-ms-long-running-operation": false,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-examples": {
          "Snapshots_CreateOrUpdate_MaximumSet_Gen": {
            "$ref": "./examples/Snapshots_CreateOrUpdate_MaximumSet_Gen.json"
          },
          "Snapshots_CreateOrUpdate_MinimumSet_Gen": {
            "$ref": "./examples/Snapshots_CreateOrUpdate_MinimumSet_Gen.json"
          }
        }
      },
      "patch": {
        "tags": [
          "Snapshots"
        ],
        "description": "Update a Volume Snapshot.",
        "operationId": "Snapshots_Update",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ElasticSanNameParameter"
          },
          {
            "$ref": "#/parameters/VolumeGroupNameParameter"
          },
          {
            "$ref": "#/parameters/SnapshotNameParameter"
          },
          {
            "name": "parameters",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/Snapshot"
            },
            "description": "Snapshot object."
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK -- Returned when the create or update operation is successfully completed.",
            "schema": {
              "$ref": "#/definitions/Snapshot"
            }
          },
          "201": {
            "description": "Accepted -- Create or update request accepted; operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/Snapshot"
            }
          },
          "default": {
            "description": "Error from the RP.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-ms-long-running-operation": false,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-examples": {
          "Snapshots_Update_MaximumSet_Gen": {
            "$ref": "./examples/Snapshots_Update_MaximumSet_Gen.json"
          },
          "Snapshots_Update_MinimumSet_Gen": {
            "$ref": "./examples/Snapshots_Update_MinimumSet_Gen.json"
          }
        }
      },
      "delete": {
        "tags": [
          "Snapshots"
        ],
        "description": "Delete an Volume.",
        "operationId": "Snapshots_Delete",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ElasticSanNameParameter"
          },
          {
            "$ref": "#/parameters/VolumeGroupNameParameter"
          },
          {
            "$ref": "#/parameters/SnapshotNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "Delete operation completed successfully."
          },
          "202": {
            "description": "Delete request accepted; operation will complete asynchronously."
          },
          "204": {
            "description": "Resource does not exist in the subscription."
          },
          "default": {
            "description": "Error from the RP",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-ms-long-running-operation": true,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-examples": {
          "Snapshots_Delete_MaximumSet_Gen": {
            "$ref": "./examples/Snapshots_Delete_MaximumSet_Gen.json"
          },
          "Snapshots_Delete_MinimumSet_Gen": {
            "$ref": "./examples/Snapshots_Delete_MinimumSet_Gen.json"
          }
        }
      },
      "get": {
        "tags": [
          "Snapshots"
        ],
        "description": "Create a Volume Snapshot.",
        "operationId": "Snapshots_Get",
        "parameters": [
          {
            "$ref": "#/parameters/SubscriptionIdParameter"
          },
          {
            "$ref": "#/parameters/ResourceGroupNameParameter"
          },
          {
            "$ref": "#/parameters/ElasticSanNameParameter"
          },
          {
            "$ref": "#/parameters/VolumeGroupNameParameter"
          },
          {
            "$ref": "#/parameters/SnapshotNameParameter"
          },
          {
            "$ref": "#/parameters/ApiVersionParameter"
          }
        ],
        "responses": {
          "200": {
            "description": "OK -- Returned when the create or update operation is successfully completed.",
            "schema": {
              "$ref": "#/definitions/Snapshot"
            }
          },
          "201": {
            "description": "Accepted -- Create or update request accepted; operation will complete asynchronously.",
            "schema": {
              "$ref": "#/definitions/Snapshot"
            }
          },
          "default": {
            "description": "Error from the RP.",
            "schema": {
              "$ref": "#/definitions/Error"
            }
          }
        },
        "x-ms-long-running-operation": false,
        "x-ms-long-running-operation-options": {
          "final-state-via": "azure-async-operation"
        },
        "x-ms-examples": {
          "Snapshots_Get_MaximumSet_Gen": {
            "$ref": "./examples/Snapshots_Get_MaximumSet_Gen.json"
          },
          "Snapshots_Get_MinimumSet_Gen": {
            "$ref": "./examples/Snapshots_Get_MinimumSet_Gen.json"
          }
        }
      }
    }
  },
  "parameters": {
    "SubscriptionIdParameter": {
      "name": "subscriptionId",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The ID of the target subscription.",
      "minLength": 1
    },
    "ApiVersionParameter": {
      "name": "api-version",
      "in": "query",
      "required": true,
      "type": "string",
      "description": "The API version to use for this operation.",
      "minLength": 1
    },
    "ResourceGroupNameParameter": {
      "name": "resourceGroupName",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The name of the resource group. The name is case insensitive.",
      "pattern": "^[-\\w\\._]*[0-9A-Za-z]$",
      "minLength": 1,
      "maxLength": 90,
      "x-ms-parameter-location": "method"
    },
    "ElasticSanNameParameter": {
      "name": "elasticSanName",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The name of the ElasticSan.",
      "x-ms-parameter-location": "method"
    },
    "VolumeGroupNameParameter": {
      "name": "volumeGroupName",
      "type": "string",
      "required": true,
      "in": "path",
      "description": "The name of the VolumeGroup.",
      "x-ms-parameter-location": "method"
    },
    "VolumeNameParameter": {
      "name": "volumeName",
      "type": "string",
      "required": true,
      "in": "path",
      "description": "The name of the Volume.",
      "x-ms-parameter-location": "method"
    },
    "FilterByVolumeParameter": {
      "name": "filterByVolume",
      "required": false,
      "in": "body",
      "description": "Filter data by Volume name",
      "schema": {
        "$ref": "#/definitions/FilterByVolume"
      },
      "x-ms-parameter-location": "method"
    },
    "ForceDeleteSnapshotsParameter": {
      "name": "x-ms-force-delete-snapshots",
      "x-ms-client-name": "forceDeleteSnapshots",
      "description": "Required if the Volume has associated snapshots",
      "x-ms-parameter-location": "method",
      "in": "header",
      "required": false,
      "type": "boolean"
    },
    "ForceDeleteVolumesSnapshotsParameter": {
      "name": "x-ms-force-delete-volumes-snapshots",
      "x-ms-client-name": "forceDeleteVolumesAndSnapshots",
      "description": "Required if the Volume Group has associated volumes and snapshots",
      "x-ms-parameter-location": "method",
      "in": "header",
      "required": false,
      "type": "boolean"
    },
    "ForceDeleteVolumeGroupsParameter": {
      "name": "x-ms-force-delete-volumegroups",
      "x-ms-client-name": "forceDeleteVolumeGroups",
      "description": "Required if the San has associated Volume Groups",
      "x-ms-parameter-location": "method",
      "in": "header",
      "required": false,
      "type": "boolean"
    },
    "SnapshotNameParameter": {
      "name": "snapshotName",
      "in": "path",
      "required": true,
      "type": "string",
      "description": "The name of the snapshot within the given subscription, resource and volume group.",
      "x-ms-parameter-location": "method"
    }
  },
  "definitions": {
    "ElasticSanOperationDisplay": {
      "type": "object",
      "required": [
        "provider",
        "resource",
        "operation",
        "description"
      ],
      "description": "Metadata about an operation.",
      "additionalProperties": false,
      "properties": {
        "provider": {
          "type": "string",
          "description": "Localized friendly form of the resource provider name."
        },
        "resource": {
          "type": "string",
          "description": "Localized friendly form of the resource type related to this action/operation."
        },
        "operation": {
          "type": "string",
          "description": "Localized friendly name for the operation, as it should be shown to the user."
        },
        "description": {
          "type": "string",
          "description": "Localized friendly description for the operation, as it should be shown to the user."
        }
      }
    },
    "ElasticSanRPOperation": {
      "type": "object",
      "required": [
        "name",
        "isDataAction",
        "display"
      ],
      "description": "Description of a ElasticSan RP Operation",
      "additionalProperties": false,
      "properties": {
        "name": {
          "type": "string",
          "description": "The name of the operation being performed on this particular object"
        },
        "isDataAction": {
          "type": "boolean",
          "description": "Indicates whether the operation applies to data-plane."
        },
        "actionType": {
          "type": "string",
          "description": "Indicates the action type."
        },
        "display": {
          "description": "Additional metadata about RP operation.",
          "$ref": "#/definitions/ElasticSanOperationDisplay"
        },
        "origin": {
          "type": "string",
          "description": "The intended executor of the operation; governs the display of the operation in the RBAC UX and the audit logs UX."
        }
      }
    },
    "ElasticSanOperationListResult": {
      "type": "object",
      "required": [
        "value"
      ],
      "description": "List of operations supported by the RP.",
      "additionalProperties": false,
      "properties": {
        "value": {
          "type": "array",
          "description": "An array of operations supported by the ElasticSan RP.",
          "items": {
            "$ref": "#/definitions/ElasticSanRPOperation"
          },
          "x-ms-identifiers": []
        },
        "nextLink": {
          "description": "URI to fetch the next section of the paginated response.",
          "type": "string"
        }
      }
    },
    "ElasticSanList": {
      "type": "object",
      "required": [
        "value"
      ],
      "description": "List of Elastic Sans",
      "additionalProperties": false,
      "properties": {
        "value": {
          "description": "An array of Elastic San objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ElasticSan"
          }
        },
        "nextLink": {
          "description": "URI to fetch the next section of the paginated response.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ElasticSan": {
      "type": "object",
      "description": "Response for ElasticSan request.",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "description": "Properties of ElasticSan.",
          "$ref": "#/definitions/ElasticSanProperties"
        },
        "systemData": {
          "description": "Resource metadata required by ARM RPC",
          "readOnly": true,
          "$ref": "#/definitions/SystemMetadata"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TrackedResource"
        }
      ]
    },
    "ElasticSanProperties": {
      "type": "object",
      "description": "Elastic San response properties.",
      "required": [
        "availabilityZones",
        "baseSizeInGB",
        "extendedSizeInTB"
      ],
      "properties": {
        "sku": {
          "description": "resource sku",
          "$ref": "#/definitions/Sku"
        },
        "availabilityZones": {
          "type": "array",
          "description": "Logical zone for Elastic San resource; example: [\"1\"].",
          "items": {
            "$ref": "#/definitions/AvailabilityZone"
          }
        },
        "provisioningState": {
          "description": "State of the operation on the resource.",
          "$ref": "#/definitions/ProvisioningState",
          "readOnly": true
        },
        "baseSizeInGB": {
          "description": "Base size of the Elastic San appliance in GB.",
          "type": "integer",
          "format": "int64",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "extendedSizeInTB": {
          "description": "Extended size of the Elastic San appliance in TB.",
          "type": "integer",
          "format": "int64",
          "x-ms-mutability": [
            "read",
            "create"
          ]
        },
        "totalSizeInTB": {
          "description": "Total size of the Elastic San appliance in TB.",
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "provisionedIops": {
          "description": "Provisioned IOPS of the Elastic San appliance.",
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "provisionedMBps": {
          "description": "Provisioned MBps Elastic San appliance.",
          "type": "integer",
          "format": "int64",
          "readOnly": true
        }
      }
    },
    "AvailabilityZone": {
      "type": "string",
      "description": "Availability zone."
    },
    "SkuInformationList": {
      "description": "List of SKU Information objects",
      "type": "object",
      "properties": {
        "value": {
          "description": "List of ResourceType Sku",
          "type": "array",
          "items": {
            "$ref": "#/definitions/ResourceTypeSku"
          },
          "x-ms-identifiers": [],
          "readOnly": true
        },
        "nextLink": {
          "description": "Links to the next set of results",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "ResourceTypeSku": {
      "description": "SkuInformation object",
      "type": "object",
      "properties": {
        "sku": {
          "description": "The Sku tier",
          "$ref": "#/definitions/Sku"
        },
        "apiVersions": {
          "description": "The API versions in which SKU is available",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true,
          "x-ms-identifiers": []
        },
        "locationInfo": {
          "description": "Availability of the SKU for the location/zone",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SkuLocationInfo"
          },
          "x-ms-identifiers": [],
          "readOnly": true
        },
        "san": {
          "description": "Scalability targets for the San account for a given tier",
          "type": "object",
          "$ref": "#/definitions/SanTierInfo"
        },
        "volumeGroup": {
          "description": "Volume Group targets for the San account for a given tier",
          "type": "object",
          "$ref": "#/definitions/VolumeGroupTierInfo"
        },
        "volume": {
          "description": "Volume targets for the San account for a given tier",
          "type": "object",
          "$ref": "#/definitions/VolumeTierInfo"
        },
        "costs": {
          "description": "The pricing info of the Sku.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/SkuCost"
          },
          "x-ms-identifiers": [],
          "readOnly": true
        }
      }
    },
    "SanTierInfo": {
      "description": "San scalability target",
      "type": "object",
      "properties": {
        "maxSizePB": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum San account capacity in PiB",
          "readOnly": true
        },
        "minSizeTB": {
          "type": "integer",
          "format": "int64",
          "description": "Minimum San account capacity in PiB",
          "readOnly": true
        },
        "minIncrementSizeTB": {
          "type": "integer",
          "format": "int64",
          "description": "Increment the San capacity in TiB",
          "readOnly": true
        },
        "maxIopsTB": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum IOPS",
          "readOnly": true
        },
        "maxMBpsTB": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum MBps",
          "readOnly": true
        },
        "maxIops": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum IOPS",
          "readOnly": true
        },
        "maxMBps": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum MBps",
          "readOnly": true
        },
        "maxVolumeGroups": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of volume groups per San account",
          "readOnly": true
        }
      }
    },
    "VolumeGroupTierInfo": {
      "description": "Volume Group scalability target",
      "type": "object",
      "properties": {
        "maxVolumes": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of Volumes per Volume Groups per San account",
          "readOnly": true
        },
        "maxSnapshots": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of Snapshots per Volume Groups per San account",
          "readOnly": true
        }
      }
    },
    "VolumeTierInfo": {
      "description": "Volume scalability target",
      "type": "object",
      "properties": {
        "maxSizeTB": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum San account capacity in TiB",
          "readOnly": true
        },
        "minSizeGB": {
          "type": "integer",
          "format": "int64",
          "description": "Minimum San account capacity in GiB",
          "readOnly": true
        },
        "minIncrementSizeGB": {
          "type": "integer",
          "format": "int64",
          "description": "Increment the San capacity in TiB",
          "readOnly": true
        },
        "maxIopsPerGB": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum IOPS",
          "readOnly": true
        },
        "maxMBpsPerGB": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum MBps",
          "readOnly": true
        },
        "maxIops": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum IOPS",
          "readOnly": true
        },
        "maxMBps": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum MBps",
          "readOnly": true
        },
        "maxSnapshots": {
          "type": "integer",
          "format": "int64",
          "description": "Maximum number of Snapshots per Volume",
          "readOnly": true
        }
      }
    },
    "SkuLocationInfo": {
      "description": "The location info.",
      "type": "object",
      "properties": {
        "location": {
          "description": "The location.",
          "type": "string",
          "readOnly": true
        },
        "zones": {
          "description": "The zones.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        },
        "sites": {
          "description": "The sites.",
          "type": "array",
          "items": {
            "type": "string"
          },
          "readOnly": true
        }
      }
    },
    "SkuCost": {
      "description": "The metadata for retrieving price info.",
      "type": "object",
      "properties": {
        "meterId": {
          "description": "Used for querying price from commerce.",
          "type": "string",
          "readOnly": true
        },
        "quantity": {
          "format": "int64",
          "description": "The cost quantity.",
          "type": "integer",
          "readOnly": true
        },
        "extendedUnit": {
          "description": "The extended unit.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "Sku": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "enum": [
            "Standard_LRS",
            "Premium_LRS",
            "Standard_ZRS"
          ],
          "x-ms-enum": {
            "name": "name",
            "modelAsString": true,
            "values": [
              {
                "value": "Standard_LRS",
                "description": "Standard locally redundant storage"
              },
              {
                "value": "Premium_LRS",
                "description": "Premium locally redundant storage"
              },
              {
                "value": "Standard_ZRS",
                "description": "Standard zone redundant storage"
              }
            ]
          },
          "description": "The sku name."
        },
        "tier": {
          "type": "string",
          "enum": [
            "Hero",
            "Satellite",
            "Hub"
          ],
          "x-ms-enum": {
            "name": "tier",
            "modelAsString": true,
            "values": [
              {
                "value": "Hero",
                "description": "Hero"
              },
              {
                "value": "Satellite",
                "description": "Satellite"
              },
              {
                "value": "Hub",
                "description": "Hub"
              }
            ]
          },
          "description": "The sku tier."
        }
      },
      "description": "The SKU name. Required for account creation; optional for update."
    },
    "IscsiTargetInfo": {
      "type": "object",
      "description": "Iscsi target information",
      "readOnly": true,
      "properties": {
        "targetIqn": {
          "type": "string",
          "description": "iSCSI Target IQN (iSCSI Qualified Name); example: \"iqn.2005-03.org.iscsi:server\".",
          "readOnly": true
        },
        "provisioningState": {
          "description": "State of the operation on the resource.",
          "$ref": "#/definitions/ProvisioningState"
        },
        "status": {
          "$ref": "#/definitions/OperationalStatus",
          "description": "Operational status of the iSCSI Target."
        },
        "endpoints": {
          "description": "List of private IPv4 addresses to connect to the storage Target.",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "VolumeGroup": {
      "type": "object",
      "description": "Response for Volume Group request.",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "description": "Properties of VolumeGroup.",
          "$ref": "#/definitions/VolumeGroupProperties"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ],
          "description": "Resource tags."
        },
        "systemData": {
          "description": "Resource metadata required by ARM RPC",
          "readOnly": true,
          "$ref": "#/definitions/SystemMetadata"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TrackedResource"
        }
      ]
    },
    "VolumeGroupList": {
      "type": "object",
      "required": [
        "value"
      ],
      "description": "List of Volume Groups",
      "additionalProperties": false,
      "properties": {
        "value": {
          "description": "An array of Volume Groups objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/VolumeGroup"
          }
        },
        "nextLink": {
          "description": "URI to fetch the next section of the paginated response.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "VolumeGroupProperties": {
      "type": "object",
      "description": "VolumeGroup response properties.",
      "required": [
        "protocolType",
        "encryption"
      ],
      "properties": {
        "provisioningState": {
          "description": "State of the operation on the resource.",
          "$ref": "#/definitions/ProvisioningState"
        },
        "protocolType": {
          "description": "Type of storage target",
          "$ref": "#/definitions/StorageTargetType"
        },
        "encryption": {
          "description": "Type of encryption",
          "$ref": "#/definitions/EncryptionType"
        },
        "networkAcls": {
          "$ref": "#/definitions/NetworkRuleSet",
          "description": "A collection of rules governing the accessibility from specific network locations.",
          "x-ms-mutability": [
            "create",
            "read"
          ]
        }
      }
    },
    "Volume": {
      "type": "object",
      "description": "Response for Volume request.",
      "properties": {
        "properties": {
          "x-ms-client-flatten": true,
          "description": "Properties of Volume.",
          "$ref": "#/definitions/VolumeProperties"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ],
          "description": "Resource tags."
        },
        "systemData": {
          "description": "Resource metadata required by ARM RPC",
          "readOnly": true,
          "$ref": "#/definitions/SystemMetadata"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TrackedResource"
        }
      ]
    },
    "FilterByVolume": {
      "type": "object",
      "description": "Filter data by volume name.",
      "properties": {
        "volumeId": {
          "description": "Volume Id to filter",
          "type": "string"
        }
      }
    },
    "VolumeList": {
      "type": "object",
      "required": [
        "value"
      ],
      "description": "List of Volumes",
      "additionalProperties": false,
      "properties": {
        "value": {
          "description": "An array of Volume objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Volume"
          }
        },
        "nextLink": {
          "description": "URI to fetch the next section of the paginated response.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "VolumeProperties": {
      "type": "object",
      "description": "Volume response properties.",
      "properties": {
        "volumeId": {
          "description": "Unique Id of the volume in GUID format",
          "type": "string"
        },
        "creationData": {
          "description": "State of the operation on the resource.",
          "$ref": "#/definitions/CreationData"
        },
        "provisioningState": {
          "description": "State of the operation on the resource.",
          "$ref": "#/definitions/ProvisioningState"
        },
        "sizeInGB": {
          "description": "Volume size.",
          "type": "integer",
          "format": "int64"
        },
        "storageTarget": {
          "description": "Storage target information",
          "$ref": "#/definitions/IscsiTargetInfo"
        }
      }
    },
    "Snapshot": {
      "type": "object",
      "description": "Response for Volume Snapshot request.",
      "properties": {
        "sku": {
          "$ref": "#/definitions/SnapshotSku"
        },
        "properties": {
          "x-ms-client-flatten": true,
          "description": "Properties of Volume Snapshot.",
          "$ref": "#/definitions/SnapshotProperties"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ],
          "description": "Resource tags."
        },
        "systemData": {
          "description": "Resource metadata required by ARM RPC",
          "readOnly": true,
          "$ref": "#/definitions/SystemMetadata"
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/TrackedResource"
        }
      ]
    },
    "SnapshotSku": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "enum": [
            "Standard_LRS",
            "Premium_LRS",
            "Standard_ZRS"
          ],
          "x-ms-enum": {
            "name": "SnapshotStorageAccountTypes",
            "modelAsString": true,
            "values": [
              {
                "value": "Standard_LRS",
                "description": "Standard HDD locally redundant storage"
              },
              {
                "value": "Premium_LRS",
                "description": "Premium SSD locally redundant storage"
              },
              {
                "value": "Standard_ZRS",
                "description": "Standard zone redundant storage"
              }
            ]
          },
          "description": "The sku name."
        }
      },
      "description": "The snapshots sku name. Can be Standard_LRS, Premium_LRS, or Standard_ZRS. This is an optional parameter for incremental snapshot and the default behavior is the SKU will be set to the same sku as the previous snapshot"
    },
    "SnapshotList": {
      "type": "object",
      "required": [
        "value"
      ],
      "description": "List of Snapshots",
      "additionalProperties": false,
      "properties": {
        "value": {
          "description": "An array of Snapshot objects.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Snapshot"
          }
        },
        "nextLink": {
          "description": "URI to fetch the next section of the paginated response.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "SnapshotProperties": {
      "type": "object",
      "description": "Properties for Snapshot.",
      "properties": {
        "creationData": {
          "description": "State of the operation on the resource.",
          "$ref": "#/definitions/CreationData"
        },
        "provisioningState": {
          "description": "Snapshot provisioning state",
          "$ref": "#/definitions/ProvisioningState"
        },
        "encryption": {
          "$ref": "#/definitions/EncryptionType",
          "description": "Encryption property can be used to encrypt data at rest with customer managed keys or platform managed keys."
        }
      }
    },
    "CreationData": {
      "type": "object",
      "description": "Data used when creating a disk.",
      "required": [
        "createSource"
      ],
      "properties": {
        "createSource": {
          "type": "string",
          "enum": [
            "None",
            "FromVolume",
            "FromVolumeSnapshot",
            "FromDiskSnapshot",
            "Export"
          ],
          "x-ms-enum": {
            "name": "VolumeOrSnapshotCreateOption",
            "modelAsString": false
          },
          "description": "This enumerates the possible sources of a volume or snapshot's creation."
        },
        "sourceUri": {
          "type": "string",
          "description": "If createOption is Copy, this is the ARM id of the source snapshot or disk. If createOption is Restore, this is the ARM-like id of the source disk restore point."
        }
      }
    },
    "Error": {
      "type": "object",
      "description": "The resource management error response.",
      "properties": {
        "error": {
          "description": "RP error response.",
          "$ref": "#/definitions/ErrorResponse"
        }
      }
    },
    "ProvisioningState": {
      "type": "string",
      "enum": [
        "Invalid",
        "Succeeded",
        "Failed",
        "Canceled",
        "Pending",
        "Creating",
        "Updating",
        "Deleting"
      ],
      "x-ms-enum": {
        "name": "ProvisioningStates",
        "modelAsString": true
      },
      "description": "Provisioning state of the iSCSI Target.",
      "readOnly": true
    },
    "OperationalStatus": {
      "type": "string",
      "enum": [
        "Invalid",
        "Unknown",
        "Healthy",
        "Unhealthy",
        "Updating",
        "Running",
        "Stopped",
        "Stopped (deallocated)"
      ],
      "x-ms-enum": {
        "name": "OperationalStatus",
        "modelAsString": true
      },
      "description": "Operational status of the resource."
    },
    "StorageTargetType": {
      "type": "string",
      "enum": [
        "Iscsi",
        "None"
      ],
      "x-ms-enum": {
        "name": "StorageTargetType",
        "modelAsString": true
      },
      "description": "Storage Target type."
    },
    "EncryptionType": {
      "type": "string",
      "description": "The type of key used to encrypt the data of the disk.",
      "enum": [
        "EncryptionAtRestWithPlatformKey",
        "EncryptionAtRestWithCustomerKey",
        "EncryptionAtRestWithPlatformAndCustomerKeys"
      ],
      "x-ms-enum": {
        "name": "EncryptionType",
        "modelAsString": true,
        "values": [
          {
            "value": "EncryptionAtRestWithPlatformKey",
            "description": "Volume/Snapshot is encrypted at rest with Platform managed key. It is the default encryption type. This is not a valid encryption type for disk encryption sets."
          },
          {
            "value": "EncryptionAtRestWithCustomerKey",
            "description": "Volume/Snapshot is encrypted at rest with Customer managed key that can be changed and revoked by a customer."
          },
          {
            "value": "EncryptionAtRestWithPlatformAndCustomerKeys",
            "description": "Volume/Snapshot is encrypted at rest with 2 layers of encryption. One of the keys is Customer managed and the other key is Platform managed."
          }
        ]
      }
    },
    "SystemMetadata": {
      "type": "object",
      "description": "Resource metadata required by ARM RPC.",
      "readOnly": true,
      "properties": {
        "createdBy": {
          "readOnly": true,
          "type": "string",
          "description": "A string identifier for the identity that created the resource."
        },
        "createdByType": {
          "readOnly": true,
          "type": "string",
          "description": "The type of identity that created the resource: user, application, managedIdentity."
        },
        "createdAt": {
          "readOnly": true,
          "type": "string",
          "description": "The timestamp of resource creation (UTC)."
        },
        "lastModifiedBy": {
          "readOnly": true,
          "type": "string",
          "description": "A string identifier for the identity that last modified the resource."
        },
        "lastModifiedByType": {
          "readOnly": true,
          "type": "string",
          "description": "The type of identity that last modified the resource: user, application, managedIdentity."
        },
        "lastModifiedAt": {
          "readOnly": true,
          "type": "string",
          "description": "The timestamp of resource last modification (UTC)."
        }
      }
    },
    "TrackedResource": {
      "description": "The resource model definition for a ARM tracked top level resource.",
      "type": "object",
      "properties": {
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "x-ms-mutability": [
            "read",
            "create",
            "update"
          ],
          "description": "Resource tags."
        },
        "location": {
          "type": "string",
          "x-ms-mutability": [
            "read",
            "create"
          ],
          "description": "The geo-location where the resource lives."
        }
      },
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ]
    },
    "Resource": {
      "description": "ARM resource model definition.",
      "type": "object",
      "properties": {
        "id": {
          "readOnly": true,
          "type": "string",
          "description": "Fully qualified resource Id for the resource. Ex - /subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/{resourceType}/{resourceName}"
        },
        "name": {
          "readOnly": true,
          "type": "string",
          "description": "The name of the resource"
        },
        "type": {
          "readOnly": true,
          "type": "string",
          "description": "The type of the resource."
        }
      },
      "x-ms-azure-resource": true
    },
    "ProxyResource": {
      "description": "The resource model definition for a ARM proxy resource. It will have everything other than required location and tags",
      "allOf": [
        {
          "$ref": "#/definitions/Resource"
        }
      ]
    },
    "ErrorAdditionalInfo": {
      "description": "The resource management error additional info.",
      "type": "object",
      "properties": {
        "type": {
          "readOnly": true,
          "type": "string",
          "description": "The additional info type."
        },
        "info": {
          "readOnly": true,
          "type": "object",
          "description": "The additional info."
        }
      }
    },
    "ErrorResponse": {
      "type": "object",
      "properties": {
        "code": {
          "readOnly": true,
          "type": "string",
          "description": "The error code."
        },
        "message": {
          "readOnly": true,
          "type": "string",
          "description": "The error message."
        },
        "target": {
          "readOnly": true,
          "type": "string",
          "description": "The error target."
        },
        "details": {
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorResponse"
          },
          "x-ms-identifiers": [],
          "description": "The error details."
        },
        "additionalInfo": {
          "readOnly": true,
          "type": "array",
          "items": {
            "$ref": "#/definitions/ErrorAdditionalInfo"
          },
          "x-ms-identifiers": [],
          "description": "The error additional info."
        }
      },
      "description": "The resource management error response."
    },
    "NetworkRuleSet": {
      "type": "object",
      "properties": {
        "defaultAction": {
          "type": "string",
          "description": "The default action when no rule from ipRules and from virtualNetworkRules match. This is only used after the bypass property has been evaluated.",
          "enum": [
            "Allow",
            "Deny"
          ],
          "x-ms-enum": {
            "name": "NetworkRuleAction",
            "modelAsString": true
          }
        },
        "virtualNetworkRules": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VirtualNetworkRule"
          },
          "description": "The list of virtual network rules."
        }
      },
      "description": "A set of rules governing the network accessibility."
    },
    "IpRule": {
      "type": "object",
      "properties": {
        "value": {
          "type": "string",
          "description": "An IPv4 address range in CIDR notation, such as '124.56.78.91' (simple IP address) or '124.56.78.0/24' (all addresses that start with 124.56.78)."
        }
      },
      "required": [
        "value"
      ],
      "description": "A rule governing the accessibility from a specific ip address or ip range."
    },
    "VirtualNetworkRule": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string",
          "description": "Full resource id of a vnet subnet, such as '/subscriptions/subid/resourceGroups/rg1/providers/Microsoft.Network/virtualNetworks/test-vnet/subnets/subnet1'."
        },
        "state": {
          "type": "string",
          "description": "Gets the state of virtual network rule."
        },
        "ignoreMissingVnetServiceEndpoint": {
          "type": "boolean",
          "description": "Ignore missing vnet service endpoint or not."
        },
        "subnets": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Subnet"
          },
          "description": "The list of subnets."
        }
      },
      "required": [
        "id"
      ],
      "description": "A rule governing the accessibility from a specific virtual network."
    },
    "Subnet": {
      "type": "string",
      "description": "Azure Resource Id of a Subnet for the Volume Group."
    }
  }
}
