{
  "swagger": "2.0",
  "info": {
    "title": "Azure Maps Dataset Service",
    "version": "1.0",
    "description": "APIs for managing datasets from uploaded data in Azure Maps."
  },
  "host": "atlas.microsoft.com",
  "schemes": [
    "https"
  ],
  "consumes": [],
  "produces": [
    "application/json",
    "application/xml"
  ],
  "securityDefinitions": {
    "azure_auth": {
      "type": "oauth2",
      "authorizationUrl": "https://login.microsoftonline.com/common/oauth2/authorize",
      "flow": "implicit",
      "description": "These are the [Azure Active Directory OAuth2](https://docs.microsoft.com/en-us/azure/active-directory/develop/v1-overview)  Flows. When paired with [Azure Role Based Access](https://docs.microsoft.com/en-us/azure/role-based-access-control/overview)  control it can be used to control access to Azure Maps REST APIs. Azure Role based access controls are used to designate access to one or more Azure Maps resource account or sub-resources. Any user, group, or service principal can be granted access via a  built in role or a custom role composed of one or more permissions to Azure Maps REST APIs.\n\nTo implement scenarios we recommend viewing [authentication concepts](https://aka.ms/amauth). In summary, this security definition provides a solution  for modeling application(s) via objects capable of access control on specific APIs and scopes.\n\n#### Note\n* This security definition **requires** the use of the `x-ms-client-id` header to indicate which Azure Maps resource the application is requesting access to.  This can be acquired from the [Maps management API](https://aka.ms/amauthdetails).\n* The `Authorization URL` is specific to the Azure public cloud instance. Sovereign clouds have unique Authorization URLs and Azure Active directory configurations. \n* The Azure role based access control is configured from the [Azure management plane](https://aka.ms/amrbac) via Azure portal, Powershell, CLI, Azure SDKs, or REST APIs.\n* Usage of the [Azure Maps Web SDK](https://aka.ms/amaadmc) allows for configuration based setup of an application for multiple use cases.\n* Currently Azure Active Directory [v1.0](https://docs.microsoft.com/en-us/azure/active-directory/develop/azure-ad-endpoint-comparison) tokens are supported.",
      "scopes": {
        "user_impersonation": "Impersonates a user's Azure Active Directory account."
      }
    },
    "apiKeyQuery": {
      "type": "apiKey",
      "description": "This is a shared key which is provisioned when creating an [Azure Maps resource](https://aka.ms/amauth) through the Azure management plane  via Azure portal, Powershell, CLI, Azure SDKs, or REST APIs. With this key, any application is authorized to access  all REST APIs. In other words, these can currently be treated as master keys to the account which they are issued for.  For publicly exposed applications our recommendation is to use server to server access of Azure Maps REST APIs where this key can be  securely stored.",
      "name": "subscription-key",
      "in": "query"
    }
  },
  "security": [
    {
      "azure_auth": []
    },
    {
      "apiKeyQuery": []
    }
  ],
  "responses": {
    "400": {
      "description": "Bad request: one or more parameters were incorrectly specified or are mutually exclusive.",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "401": {
      "description": "Access denied due to invalid subscription key or invalid Azure Active Directory bearer token.  Make sure to provide a valid key for an active Azure subscription and Maps resource.  Otherwise, verify the [WWW-Authenticate](https://tools.ietf.org/html/rfc6750#section-3.1) header for error code and description of the provided AAD bearer token.",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      },
      "headers": {
        "WWW-Authenticate": {
          "type": "string",
          "description": "Bearer realm=\"https://atlas.microsoft.com/\", error=\"invalid_token\", error_description=\"The access token expired\""
        }
      }
    },
    "403": {
      "description": "Permission, capacity, or authentication issues.",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "404": {
      "description": "Not Found: the requested resource could not be found, but it may be available again in the future.",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "500": {
      "description": "An error occurred while processing the request. Please try again later.",
      "schema": {
        "$ref": "#/definitions/ErrorResponse"
      }
    },
    "200Async": {
      "description": "The operation's status response.",
      "schema": {
        "$ref": "#/definitions/LongRunningOperationResult"
      },
      "headers": {
        "Access-Control-Expose-Headers": {
          "type": "string",
          "description": "The list of response headers that can be read by the client."
        }
      }
    },
    "201Async": {
      "description": "The resource has been created successfully.",
      "schema": {
        "$ref": "#/definitions/LongRunningOperationResult"
      },
      "headers": {
        "Location": {
          "type": "string",
          "description": "A URI where details on the newly created resource can be found."
        },
        "Access-Control-Expose-Headers": {
          "type": "string",
          "description": "The list of response headers that can be read by the client."
        }
      }
    },
    "202Async": {
      "description": "Request Accepted: The request has been accepted for processing. Please use the URL in the Location Header to retry or access the results.",
      "headers": {
        "Location": {
          "type": "string",
          "description": "New URL to check for the results of the long running process."
        },
        "Access-Control-Expose-Headers": {
          "type": "string",
          "description": "The list of response headers that can be read by the client."
        }
      }
    }
  },
  "parameters": {
    "SubscriptionKey": {
      "name": "subscription-key",
      "description": "One of the Azure Maps keys provided from an Azure Map Account. Please refer to this [article](https://docs.microsoft.com/azure/azure-maps/how-to-manage-authentication) for details on how to manage authentication.",
      "type": "string",
      "in": "query",
      "required": false,
      "x-ms-parameter-location": "client"
    },
    "ApiVersion": {
      "name": "api-version",
      "description": "Version number of Azure Maps API. Current version is 1.0",
      "type": "string",
      "in": "query",
      "required": true,
      "default": "1.0",
      "x-ms-parameter-location": "client"
    },
    "ConversionId": {
      "name": "conversionId",
      "description": "The unique ID used to create the dataset. The `conversionId` must have been obtained from a successful call to the Conversion Service Convert API and must be provided with multiple query parameters with same name (if more than one is provided). May not be provided in conjunction with the `udid` query parameter.",
      "type": "string",
      "in": "query",
      "required": false,
      "x-ms-parameter-location": "method"
    },
    "Udid": {
      "name": "udid",
      "description": "The unique data ID used to create the dataset. The `udid` must have been obtained from a successful call to the Data Service Upload API and must be provided with multiple query parameters with the same name (if more than one is provided). May not be provided in conjunction with `conversionId` query parameter.",
      "type": "string",
      "in": "query",
      "required": false,
      "x-ms-parameter-location": "method"
    },
    "Description": {
      "name": "description",
      "description": "The description to be given to the dataset.",
      "type": "string",
      "in": "query",
      "required": false,
      "x-ms-parameter-location": "method"
    },
    "DatasetId": {
      "name": "datasetId",
      "type": "string",
      "in": "path",
      "description": "The identifier for the dataset to query from.",
      "required": true,
      "x-ms-parameter-location": "method"
    },
    "Type": {
      "name": "type",
      "type": "string",
      "in": "query",
      "description": "The type of data to create the dataset with.",
      "enum": [
        "facility",
        "raster",
        "outdoor"
      ],
      "x-ms-enum": {
        "name": "type",
        "modelAsString": false,
        "values": [
          {
            "value": "facility",
            "description": "Facility Maps data type."
          },
          {
            "value": "raster",
            "description": "Raster image data."
          },
          {
            "value": "outdoor",
            "description": "Outdoor Maps data type."
          }
        ]
      },
      "required": true,
      "x-ms-parameter-location": "method"
    },
    "ImportType": {
      "name": "type",
      "type": "string",
      "in": "query",
      "description": "The type of data to import into the dataset with.",
      "enum": [
        "fixture"
      ],
      "x-ms-enum": {
        "name": "type",
        "modelAsString": false,
        "values": [
          {
            "value": "fixture",
            "description": "Area and point element data."
          }
        ]
      },
      "required": true,
      "x-ms-parameter-location": "method"
    },
    "AppendDatasetId": {
      "name": "datasetId",
      "type": "string",
      "in": "query",
      "description": "The ID for the dataset to append to.",
      "required": false,
      "x-ms-parameter-location": "method"
    },
    "StatusId": {
      "name": "statusId",
      "type": "string",
      "in": "path",
      "description": "The ID to query the status for the dataset create/import request.",
      "required": true,
      "x-ms-parameter-location": "method"
    }
  },
  "paths": {
    "/dataset/create": {},
    "/dataset/import/{datasetId}": {},
    "/dataset/{datasetId}": {},
    "/dataset": {}
  },
  "definitions": {
    "ErrorResponse": {
      "type": "object",
      "description": "This response object is returned when an error occurs in the Maps API",
      "properties": {
        "error": {
          "$ref": "#/definitions/Error"
        }
      }
    },
    "Error": {
      "type": "object",
      "description": "This object is returned when an error occurs in the Maps API",
      "properties": {
        "code": {
          "type": "string",
          "readOnly": true,
          "description": "The HTTP status code."
        },
        "message": {
          "type": "string",
          "readOnly": true,
          "description": "If available, a human readable description of the error."
        }
      }
    },
    "ODataErrorResponse": {
      "type": "object",
      "description": "This response object is returned when an error occurs in the Maps API.",
      "properties": {
        "error": {
          "$ref": "#/definitions/ODataError"
        }
      }
    },
    "ODataError": {
      "type": "object",
      "description": "This object is returned when an error occurs in the Maps API.",
      "properties": {
        "code": {
          "type": "string",
          "readOnly": true,
          "description": "The ODataError code."
        },
        "message": {
          "type": "string",
          "readOnly": true,
          "description": "If available, a human readable description of the error."
        },
        "details": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ODataError"
          }
        },
        "target": {
          "type": "string",
          "readOnly": true,
          "description": "If available, the target causing the error."
        }
      }
    },
    "LongRunningOperationResult": {
      "description": "The response model for a Long-Running Operations API.",
      "type": "object",
      "properties": {
        "operationId": {
          "description": "The Id for this long-running operation.",
          "type": "string"
        },
        "status": {
          "description": "The status state of the request.",
          "type": "string",
          "enum": [
            "NotStarted",
            "Running",
            "Failed",
            "Succeeded"
          ],
          "x-ms-enum": {
            "name": "type",
            "modelAsString": false,
            "values": [
              {
                "value": "NotStarted",
                "description": "The request has not started processing yet."
              },
              {
                "value": "Running",
                "description": "The request has started processing."
              },
              {
                "value": "Failed",
                "description": "The request has one or more failures."
              },
              {
                "value": "Succeeded",
                "description": "The request has successfully completed."
              }
            ]
          },
          "readOnly": true
        },
        "created": {
          "description": "The created timestamp.",
          "type": "string",
          "readOnly": true
        },
        "resourceLocation": {
          "description": "The location URI for details about the created resource. This is only provided when the request was successfully completed.",
          "type": "string",
          "readOnly": true
        },
        "error": {
          "$ref": "#/definitions/ODataError"
        },
        "warning": {
          "$ref": "#/definitions/ODataError"
        }
      }
    },
    "DatasetDeleteResponse": {
      "description": "The response model for the Dataset Delete API. The response body will be empty signifying there's no content available for the `datasetId` anymore.",
      "type": "object"
    },
    "DatasetListResponse": {
      "description": "The response model for the Dataset List API. The response body will contain a list of all the previously created datasets.",
      "type": "object",
      "properties": {
        "datasets": {
          "description": "A list of all the previously created datasets.",
          "type": "array",
          "readOnly": true,
          "items": {
            "$ref": "#/definitions/DatasetDetailInfo"
          }
        }
      }
    },
    "DatasetDetailInfo": {
      "description": "Detail information for the dataset.",
      "type": "object",
      "properties": {
        "created": {
          "description": "The created timestamp for the dataset.",
          "type": "string",
          "readOnly": true
        },
        "datasetId": {
          "description": "The id for the dataset.",
          "type": "string",
          "readOnly": true
        },
        "description": {
          "description": "The description for the dataset.",
          "type": "string",
          "readOnly": true
        },
        "datasetSources": {
          "$ref": "#/definitions/DatasetSources"
        }
      }
    },
    "DatasetSources": {
      "description": "Information about the details of the create request for the dataset.",
      "type": "object",
      "properties": {
        "conversionIds": {
          "description": "The list of `conversionId` that were used to create the dataset.",
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        },
        "udids": {
          "description": "The list of `conversionId` that were used to create the dataset.",
          "type": "array",
          "readOnly": true,
          "items": {
            "type": "string"
          }
        },
        "appendDatasetId": {
          "description": "The dataset that was appended to to create the current dataset.",
          "type": "string",
          "readOnly": true
        },
        "type": {
          "description": "The type of data stored in the dataset.",
          "type": "string",
          "readOnly": true
        }
      }
    },
    "DatasetGetDetailsResponse": {
      "$ref": "#/definitions/DatasetDetailInfo"
    }
  }
}