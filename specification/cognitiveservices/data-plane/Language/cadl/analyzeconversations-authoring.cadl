import "@azure-tools/cadl-azure-core";
import "@cadl-lang/rest";
import "@cadl-lang/openapi";
import "./common.cadl";

using Azure.Core;
using Azure.Core.Operations;
using Cadl.Rest;
using Cadl.Http;

@server(
  "{Endpoint}/language",
  "Language Service",
  {
    Endpoint: Endpoint,
  }
)
@serviceTitle("Microsoft Cognitive Language Service - Analyze Conversations Authoring")
@serviceVersion("2022-05-01")
@doc("The language service API is a suite of natural language processing (NLP) skills built with best-in-class Microsoft machine learning algorithms. The API can be used to analyze unstructured text for tasks such as sentiment analysis, key phrase extraction, language detection and question answering. Further documentation can be found in <a href=\"https://docs.microsoft.com/en-us/azure/cognitive-services/language-service/overview\">https://docs.microsoft.com/en-us/azure/cognitive-services/language-service/overview</a>.")
namespace Microsoft.Language.AnalyzeConversations.Authoring;

// interface Lifetime<TResource> {
//   op create is ResourceCreateOrUpdate<TResource>;
//   op read is ResourceRead<TResource>;
//   op delete is ResourceDelete<TResource>;
//   op list is ResourceList<TResource>;
// }


@route("/authoring/analyze-conversations/")
interface Project { // extends Lifetime<ProjectMetadata> {
	op ListProjects is ResourceList<ProjectMetadata>;
	op GetProject is ResourceRead<ProjectMetadata>;
	op CreateProject is ResourceCreateOrUpdate<ProjectMetadata>;
	op DeleteProject is ResourceDelete<ProjectMetadata>;

	op Export is ResourceAction<ProjectMetadata, {}>;
	op Import is ResourceAction<ProjectMetadata, {}>;
	op Train is ResourceAction<ProjectMetadata, {}, TrainingJobOptionsBody>;

	//op GetExportStatus is ResourceRead<ProjectMetadata, {@path jobId: int}>;
	//op GetImportStatus is ResourceRead<ProjectMetadata, {@path jobId: int}>;

	//op ListTrainingJobs is ResourceList ?
	//op GetTrainingStatus is ResourceRead<ProjectMetadata, {@path jobId: int}>;
	//op CancelTrainingJob is ResourceAction<ProjectMetadata, {@path jobId: int}>;
}


// @route("/authoring/analyze-conversations/")
// interface Models {
// 	@route("/models")
// 	op ListTrainedModels is ResourceList<ProjectMetadata>;
// 	op GetTrainedModel is ResourceRead<ProjectTrainedModel>;
// 	op DeleteTrainedModel is ResourceRead<ProjectTrainedModel>;

// 	op GetModelEvaluationResults is ResourceRead ?
// 	op GetModelEvaluationSummary is ResourceRead ?
//}

@route("/authoring/analyze-conversations/")
interface Deployments {
	op ListDeployments is ResourceList<ProjectDeployment>;
	op GetDeployment is ResourceRead<ProjectDeployment>;
	op DeployDeployment is LongRunningResourceCreateOrReplace<ProjectDeployment>;
	op DeleteDeployment is ResourceDelete<ProjectDeployment>;

	op SwapDeployments is ResourceAction<ProjectMetadata, {}, SwapDeploymentsOptionsBody>;
	//op GetSwapDeploymentsStatus is ResourceRead<ProjectMetadata, {@path jobId: int}>;
}

@route("/authoring/analyze-conversations/")
interface Jobs {
	op GetDeploymentStatus is ResourceRead<JobState>;
}

@route("projects/global/")
interface Global {
  @get
  @route("languages")
  getSupportedLanguages(
    ...ListQueryParams,
    ...Azure.Core.ApiVersionParameter
  ): OkResponse<SupportedLanguages> | ErrorResponse;

  @get
  @route("prebuilt-entities")
  GetSupportedPrebuiltEntities(
    ...ListQueryParams,
    ...Azure.Core.ApiVersionParameter
  ): OkResponse<TrainingConfigVersions> | ErrorResponse;

  @get
  @route("training-config-versions")
  listTrainingConfigVersions(
    ...ListQueryParams,
    ...Azure.Core.ApiVersionParameter
  ): OkResponse<TrainingConfigVersions> | ErrorResponse;
}


@doc("The job ID.")
model JobIdPathParameter {
}

@doc("The trained model label.")
model TrainedModelLabelPathParameter {
}

@knownValues(CompositionSettingKV)
model CompositionSetting is string {}
enum CompositionSettingKV {
	returnLongestOverlap,
	requireExactOverlap,
	separateComponents,
	combineComponents,
}

model ConfusionMatrix {
}

@doc("Represents a cell in a confusion matrix.")
model ConfusionMatrixCell {
	@doc("Represents normalized value in percentages.")
	normalizedValue: float64;
	@doc("Represents raw value.")
	rawValue: float64;
}

model ConfusionMatrixRow {
}

@doc("Represents an entity with its components.")
model ConversationExportedEntity {
	@doc("The category of the entity.")
	category: string;
	@doc("The behavior to follow when the entity's components overlap with each other.")
	compositionSetting?: CompositionSetting;
	@doc("The list component of the entity.")
	list?: ExportedEntityList;
	@doc("The prebuilt entities components.")
	prebuilts?: ExportedPrebuiltEntity[];
}

@doc("Represents an exported intent of a conversational project.")
model ConversationExportedIntent {
	@doc("The intent category.")
	category: string;
}

@doc("Represents the exported assets of a conversational project.")
model ConversationExportedProjectAssets {
	@doc("The intents defined in the project.")
	intents?: ConversationExportedIntent[];
	@doc("The entities defined in the project.")
	entities?: ConversationExportedEntity[];
	@doc("The utterances defined in the project.")
	utterances?: ConversationExportedUtterance[];
}

@doc("Represents an exported utterance for a conversational project.")
model ConversationExportedUtterance {
	@doc("Represents the entity labels of the utterance.")
	entities?: ExportedUtteranceEntityLabel[];
	@doc("The utterance text.")
	text: string;
	@doc("Represents the utterance's language. This is BCP-47 representation of a language. For example, use \"en\" for English, \"en-gb\" for English (UK), \"es\" for Spanish etc.")
	language?: string;
	@doc("The intent of the utterance.")
	intent: string;
	@doc("The dataset for this utterance. Allowed values are 'Train' and 'Test'.")
	dataset?: string;
}

@doc("Represents the options for creating or updating a project deployment.")
model CreateDeploymentOptions {
	@doc("Represents the trained model label.")
	trainedModelLabel: string;
}

@doc("Represents the options used to create or update a project.")
model CreateProjectOptions {
	@doc("Represents the project kind.")
	projectKind: ProjectKind;
	@doc("The project settings.")
	settings?: ProjectSettings;
	@doc("The new project name.")
	projectName: string;
	@doc("Whether the project would be used for multiple languages or not.")
	multilingual?: boolean;
	@doc("The project description.")
	description?: string;
	@doc("The project language. This is BCP-47 representation of a language. For example, use \"en\" for English, \"en-gb\" for English (UK), \"es\" for Spanish etc.")
	language: string;
}

@doc("Represents the state of a deployment job.")
model DeploymentJobState {
}

@doc("Represents the evaluation result summary for the project's entities.")
model EntitiesEvaluationSummary {
	@doc("Represents the confusion matrix between two entities (the two entities can be the same). The matrix is between the entity that was labelled and the entity that was predicted.")
	confusionMatrix: ConfusionMatrix;
	@doc("Represents the entities evaluation summary.")
	entities: Map<string, string>;
	@doc("Represents the micro F1")
	microF1: float64;
	@doc("Represents the micro precision")
	microPrecision: float64;
	@doc("Represents the micro recall")
	microRecall: float64;
	@doc("Represents the macro F1")
	macroF1: float64;
	@doc("Represents the macro precision")
	macroPrecision: float64;
	@doc("Represents the macro recall")
	macroRecall: float64;
}

@doc("Represents the evaluation result for an entity.")
model EntityEvaluationSummary {
	@doc("Represents the model precision")
	f1: float64;
	@doc("Represents the model recall")
	precision: float64;
	@doc("Represents the model F1 score")
	recall: float64;
	@doc("Represents the count of true positive")
	truePositiveCount: int32;
	@doc("Represents the count of true negative")
	trueNegativeCount: int32;
	@doc("Represents the count of false positive")
	falsePositiveCount: int32;
	@doc("Represents the count of false negative")
	falseNegativeCount: int32;
}

@knownValues(EvaluationKindKV)
model EvaluationKind is string {}
enum EvaluationKindKV {
	percentage,
	manual,
}

@doc("Represents the options used running the evaluation.")
model EvaluationOptions {
	@doc("Represents the evaluation kind. By default, the evaluation kind is set to percentage.")
	kind?: EvaluationKind;
	@doc("Represents the training dataset split percentage. Only needed in case the evaluation kind is percentage.")
	trainingSplitPercentage?: int32;
	@doc("Represents the testing dataset split percentage. Only needed in case the evaluation kind is percentage.")
	testingSplitPercentage?: int32;
}

@doc("Represent a list of utterances' evaluation results.")
model EvaluationResults {
	@doc("The utterances evaluation results.")
	value: UtteranceEvaluationResult[];
	@doc("The next page link.")
	nextLink: string;
}

@doc("Represents the evaluation result summary.")
model EvaluationSummary {
	@doc("Contains the data related to entities evaluation.")
	entitiesEvaluation: EntitiesEvaluationSummary;
	@doc("Contains the data related to intents evaluation.")
	intentsEvaluation: IntentsEvaluationSummary;
	@doc("The options that were used while running the evaluation.")
	evaluationOptions?: EvaluationOptions;
}

@doc("Defines the orchestration details for a Conversational project target.")
model ExportedConversationOrchestration {
	@doc("The name of the targeted project.")
	projectName: string;
	@doc("The name of the targeted deployment.")
	deploymentName: string;
}

@doc("Represents the orchestration options for a Conversational project target.")
model ExportedConversationOrchestrationOptions {
	@doc("The Conversational project target details.")
	conversationOrchestration: ExportedConversationOrchestration;
}

@doc("Represents a list component of an entity.")
model ExportedEntityList {
	@doc("The sub-lists of the list component.")
	sublists?: ExportedEntitySublist[];
}

@doc("Represents a list of synonyms inside a list component")
model ExportedEntityListSynonym {
	@doc("Represents the language of the synonyms. This is BCP-47 representation of a language. For example, use \"en\" for English, \"en-gb\" for English (UK), \"es\" for Spanish etc.")
	language?: string;
	@doc("The list of synonyms.")
	values?: string[];
}

@doc("Represents a sub-list inside a list component.")
model ExportedEntitySublist {
	@doc("The key of the sub-list.")
	listKey?: string;
	@doc("The phrases of that correspond to the sub-list.")
	synonyms?: ExportedEntityListSynonym[];
}

@doc("Defines the orchestration details for a LUIS application target.")
model ExportedLuisOrchestration {
	@doc("The LUIS application ID.")
	appId: string;
	@doc("The targeted version Id.")
	appVersion?: string;
	@doc("The targeted slot name.")
	slotName?: string;
}

@doc("Represents the orchestration options for a LUIS application target.")
model ExportedLuisOrchestrationOptions {
	@doc("The LUIS application target details.")
	luisOrchestration: ExportedLuisOrchestration;
}

@doc("Represents the options used to define the orchestration behavior of an intent.")
model ExportedOrchestrationOptions {
	@doc("The kind of the target used in the orchestration flow.")
	targetProjectKind: OrchestrationTargetProjectKind;
}

@doc("Represents an exported prebuilt entity component")
model ExportedPrebuiltEntity {
	@doc("The prebuilt entity category.")
	category: string;
}

@doc("Represents an exported project.")
model ExportedProject {
	@doc("The version of the exported file.")
	projectFileVersion: string;
	@doc("Specifies the method used to interpret string offsets. For additional information see https://aka.ms/text-analytics-offsets.")
	stringIndexType: StringIndexType;
	@doc("Represents the project metadata.")
	metadata: CreateProjectOptions;
	@doc("Represents the project assets.")
	assets?: ExportedProjectAssets;
}

@doc("Represents the assets of an exported project.")
model ExportedProjectAssets {
	@doc("The type of project containing the assets.")
	projectKind: ProjectKind;
}

@knownValues(ExportedProjectFormatKV)
model ExportedProjectFormat is string {}
enum ExportedProjectFormatKV {
	Conversation,
	Luis,
}

@doc("Defines the orchestration details for a Question Answering project target.")
model ExportedQuestionAnsweringOrchestration {
	@doc("The name of the target project.")
	projectName: string;
}

@doc("Represents the orchestration options for a Question Answering project target.")
model ExportedQuestionAnsweringOrchestrationOptions {
	@doc("The Question Answering project details.")
	questionAnsweringOrchestration: ExportedQuestionAnsweringOrchestration;
}

@doc("Represents an entity label for an utterance.")
model ExportedUtteranceEntityLabel {
	@doc("The category of the entity label.")
	category: string;
	@doc("Start position for the entity text.")
	offset: int32;
	@doc("Length for the entity text.")
	length: int32;
}

@doc("Represents the state of an export job.")
model ExportProjectJobState {
	@doc("The URL to use in order to download the exported project.")
	resultUrl?: string;
}

@doc("Represents the state of an import job.")
model ImportProjectJobState {
}

@doc("The evaluation summary for an intent.")
model IntentEvaluationSummary {
	@doc("Represents the model precision")
	f1: float64;
	@doc("Represents the model recall")
	precision: float64;
	@doc("Represents the model F1 score")
	recall: float64;
	@doc("Represents the count of true positive")
	truePositiveCount: int32;
	@doc("Represents the count of true negative")
	trueNegativeCount: int32;
	@doc("Represents the count of false positive")
	falsePositiveCount: int32;
	@doc("Represents the count of false negative")
	falseNegativeCount: int32;
}

@doc("Represents the evaluation summary for the project's intents.")
model IntentsEvaluationSummary {
	@doc("Represents the confusion matrix between two intents (the two intents can be the same). The matrix is between the intent that was labelled and the intent that was predicted.")
	confusionMatrix: ConfusionMatrix;
	@doc("Represents the intents evaluation summary.")
	intents: Map<string, string>;
	@doc("Represents the micro F1")
	microF1: float64;
	@doc("Represents the micro precision")
	microPrecision: float64;
	@doc("Represents the micro recall")
	microRecall: float64;
	@doc("Represents the macro F1")
	macroF1: float64;
	@doc("Represents the macro precision")
	macroPrecision: float64;
	@doc("Represents the macro recall")
	macroRecall: float64;
}

@parentResource(ProjectDeployment)
@doc("Represents a job's state.")
model JobState {
	@key
	@doc("The job ID.")
	@segment("jobs")
	jobId: string;
	@doc("The creation date time of the job.")
	createdDateTime: zonedDateTime;
	@doc("The last date time the job was updated.")
	lastUpdatedDateTime: zonedDateTime;
	@doc("The expiration date time of the job.")
	expirationDateTime?: zonedDateTime;
	@doc("The job status.")
	status: JobStatus;
	@doc("The warnings that were encountered while executing the job.")
	warnings?: Warning[];
	@doc("The errors encountered while executing the job.")
	errors?: Error[];
}

@knownValues(JobStatusKV)
model JobStatus is string {}
enum JobStatusKV {
	notStarted,
	running,
	succeeded,
	failed,
	cancelled,
	cancelling,
	partiallyCompleted,
}

@doc("Represents an exported intent for an orchestration project.")
model OrchestrationExportedIntent {
	@doc("Specifies the behavior of this intent in the orchestration flow.")
	orchestration?: ExportedOrchestrationOptions;
	@doc("The intent category.")
	category: string;
}

@doc("Represents the assets of an orchestration project.")
model OrchestrationExportedProjectAssets {
	@doc("Represents the intents of the project.")
	intents?: OrchestrationExportedIntent[];
	@doc("Represents the utterances of the project.")
	utterances?: OrchestrationExportedUtterance[];
}

@doc("Represents an utterance of an orchestration project.")
model OrchestrationExportedUtterance {
	@doc("The utterance text.")
	text: string;
	@doc("Represents the utterance's language. This is BCP-47 representation of a language. For example, use \"en\" for English, \"en-gb\" for English (UK), \"es\" for Spanish etc.")
	language?: string;
	@doc("The intent of the utterance.")
	intent: string;
	@doc("The dataset for this utterance. Allowed values are 'Train' and 'Test'.")
	dataset?: string;
}

@knownValues(OrchestrationTargetProjectKindKV)
model OrchestrationTargetProjectKind is string {}
enum OrchestrationTargetProjectKindKV {
	Luis,
	Conversation,
	QuestionAnswering,
}

@doc("Represents a list of the retrieved supported prebuilt entities.")
model PrebuiltEntities {
	@doc("The supported prebuilt entities.")
	value: PrebuiltEntity[];
	@doc("The next page link.")
	nextLink: string;
}

@doc("Represents a supported prebuilt entity.")
model PrebuiltEntity {
	@doc("The prebuilt entity category.")
	category: string;
	@doc("The description.")
	description: string;
	@doc("English examples for the entity.")
	examples: string;
}

@doc("Represents the state of a project deletion job.")
model ProjectDeletionJobState {
}

@doc("Represents a project deployment.")
@parentResource(ProjectMetadata)
model ProjectDeployment {
	@key
	@segment("deployments")
	@doc("Represents deployment name.")
	deploymentName: string;

	@doc("Represents deployment modelId.")
	modelId: string;
	@doc("Represents deployment last trained time.")
	lastTrainedDateTime: zonedDateTime;
	@doc("Represents deployment last deployed time.")
	lastDeployedDateTime: zonedDateTime;
	@doc("Represents deployment expiration date in the runtime.")
	deploymentExpirationDate: plainDate;
	@doc("Represents model training config version.")
	modelTrainingConfigVersion: string;
}

@doc("Represents a list of retrieved deployments.")
model ProjectDeployments {
	@doc("The list of retrieved deployments.")
	value: ProjectDeployment[];
	@doc("The next page link.")
	nextLink: string;
}

@knownValues(ProjectKindKV)
model ProjectKind is string {}
enum ProjectKindKV {
	Conversation,
	Orchestration,
}

@doc("Represents the metadata of a project.")
model ProjectMetadata {
	@key
	@segment("projects")
	@doc("The new project name.")
	projectName: string;

	@doc("Represents the project creation datetime.")
	createdDateTime: zonedDateTime;
	@doc("Represents the project creation datetime.")
	lastModifiedDateTime: zonedDateTime;
	@doc("Represents the project last trained datetime.")
	lastTrainedDateTime?: zonedDateTime;
	@doc("Represents the project last deployed datetime.")
	lastDeployedDateTime?: zonedDateTime;
	@doc("Represents the project kind.")
	projectKind: ProjectKind;
	@doc("The project settings.")
	settings?: ProjectSettings;
	@doc("Whether the project would be used for multiple languages or not.")
	multilingual?: boolean;
	@doc("The project description.")
	description?: string;
	@doc("The project language. This is BCP-47 representation of a language. For example, use \"en\" for English, \"en-gb\" for English (UK), \"es\" for Spanish etc.")
	language: string;
}

@doc("Represents the settings used to define the project behavior.")
model ProjectSettings {
	@doc("The threshold of the intent with the highest confidence, at which the prediction will automatically be changed to \"None\".")
	confidenceThreshold: float64;
}

@doc("Represents a list of retrieved projects' metadata.")
model ProjectsMetadata {
	@doc("The list of projects.")
	value: ProjectMetadata[];
	@doc("The next page link.")
	nextLink: string;
}

@doc("Represents a trained model.")
model ProjectTrainedModel {
	@doc("The trained model label.")
	label: string;
	@doc("The model ID.")
	modelId: string;
	@doc("The last trained date time of the model.")
	lastTrainedDateTime: zonedDateTime;
	@doc("The duration of the model's last training request in seconds.")
	lastTrainingDurationInSeconds: int32;
	@doc("The model expiration date.")
	modelExpirationDate: plainDate;
	@doc("The model training config version.")
	modelTrainingConfigVersion: string;
}

@doc("Represents a list of retrieved trained models.")
model ProjectTrainedModels {
	@doc("The list of retrieved jobs.")
	value: ProjectTrainedModel[];
	@doc("The next page link.")
	nextLink: string;
}

@knownValues(StringIndexTypeKV)
model StringIndexType is string {}
enum StringIndexTypeKV {
	Utf16CodeUnit,
}

@doc("Represents the detailed state of a training sub-operation.")
model SubTrainingJobState {
	@doc("Represents progress percentage.")
	percentComplete: int32;
	@doc("Represents the start date time.")
	startDateTime?: zonedDateTime;
	@doc("Represents the end date time.")
	endDateTime?: zonedDateTime;
	@doc("Represents the status of the sub-operation.")
	status: JobStatus;
}

@doc("Represents a supported language.")
model SupportedLanguage {
	@doc("The language name.")
	languageName: string;
	@doc("The language code. This is BCP-47 representation of a language. For example, \"en\" for English, \"en-gb\" for English (UK), \"es\" for Spanish etc.")
	languageCode: string;
}

@doc("Represents a list of retrieved languages.")
model SupportedLanguages is Page<SupportedLanguage> {}

model SwapDeploymentsOptionsBody {
	@body __body__: SwapDeploymentsOptions;
}

@doc("Represents the options for swapping two deployments together.")
model SwapDeploymentsOptions {
	@doc("Represents the first deployment name.")
	firstDeploymentName: string;
	@doc("Represents the second deployment name.")
	secondDeploymentName: string;
}

@doc("Represents a training config version.")
model TrainingConfigVersion {
	@doc("Represents the version of the config.")
	trainingConfigVersion: string;
	@doc("Represents the training config version expiration date.")
	modelExpirationDate: plainDate;
}

@doc("Represents a list of training config versions.")
model TrainingConfigVersions is Page<TrainingConfigVersion> {}

model TrainingJobOptionsBody {
	@body __body__: TrainingJobOptions;
}

@doc("Represents the options for starting a new training job.")
model TrainingJobOptions {
	@doc("Represents the output model label.")
	modelLabel: string;
	@doc("Represents training config version. By default, \"latest\" value is used which uses the latest released training config version.")
	trainingConfigVersion?: string;
	@doc("Represents the mode of the training operation.")
	trainingMode: TrainingMode;
	@doc("Represents the evaluation options. By default, the evaluation kind is percentage, with training split percentage as 80, and testing split percentage as 20.")
	evaluationOptions?: EvaluationOptions;
}

@doc("Represents the output of a training job.")
model TrainingJobResult {
	@doc("Represents trained model label.")
	modelLabel: string;
	@doc("Represents training config version.")
	trainingConfigVersion: string;
	@doc("Represents the mode of the training operation.")
	trainingMode?: TrainingMode;
	@doc("Represents the model training status.")
	trainingStatus: SubTrainingJobState;
	@doc("Represents model evaluation status.")
	evaluationStatus?: SubTrainingJobState;
	@doc("Represents the estimated end date time for training and evaluation.")
	estimatedEndDateTime?: zonedDateTime;
}

@doc("Represents a list of retrieved training jobs.")
model TrainingJobs {
	@doc("The list of jobs.")
	value: TrainingJobState[];
	@doc("The next page link.")
	nextLink: string;
}

@doc("Represents the state of a training job.")
model TrainingJobState {
	@doc("Represents training tasks detailed result.")
	result: TrainingJobResult;
}

@knownValues(TrainingModeKV)
model TrainingMode is string {}
enum TrainingModeKV {
	advanced,
	standard,
}

@doc("Represents the comparison between the expected and predicted entities for an utterance.")
model UtteranceEntitiesEvaluationResult {
	@doc("Represents the expected entity labels.")
	expectedEntities: UtteranceEntityEvaluationResult[];
	@doc("Represents the predicted entity labels.")
	predictedEntities: UtteranceEntityEvaluationResult[];
}

@doc("Represents the evaluation output of an entity label or prediction.")
model UtteranceEntityEvaluationResult {
	@doc("Represents the entity category.")
	category: string;
	@doc("Represents the entity offset index relative to the original text.")
	offset: int32;
	@doc("Represents the entity length.")
	length: int32;
}

@doc("Represents the evaluation result for an utterance.")
model UtteranceEvaluationResult {
	@doc("Represents the utterance text.")
	text: string;
	@doc("Represents the utterance language. This is BCP-47 representation of a language. For example, use \"en\" for English, \"en-gb\" for English (UK), \"es\" for Spanish etc.")
	language: string;
	@doc("Represents the entities results for the utterance.")
	entitiesResult: UtteranceEntitiesEvaluationResult;
	@doc("Represents the intents results for the utterance.")
	intentsResult: UtteranceIntentsEvaluationResult;
}

@doc("Represents the comparison between the expected and the predicted intent for an utterance.")
model UtteranceIntentsEvaluationResult {
	@doc("Represents the utterance's expected intent.")
	expectedIntent: string;
	@doc("Represents the utterance's predicted intent.")
	predictedIntent: string;
}

@doc("Represents a warning that was encountered while executing the request.")
model Warning {
	@doc("The warning code.")
	code: string;
	@doc("The warning message.")
	message: string;
}

